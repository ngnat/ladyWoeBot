{"ast":null,"code":"import _regeneratorRuntime from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport Axios from 'axios';\n\nfunction Chatbot() {\n  var textQuery = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var conversation, textQueryVariables, response, _iterator, _step, content;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              conversation = {\n                who: 'user',\n                content: {\n                  text: {\n                    text: text\n                  }\n                }\n              };\n              console.log(conversation);\n              textQueryVariables = {\n                text: text\n              };\n              _context.prev = 3;\n              _context.next = 6;\n              return Axios.post('/api/dialogflow/textQuery', textQueryVariables);\n\n            case 6:\n              response = _context.sent;\n              _iterator = _createForOfIteratorHelper(response.data.fulfillmentMessages);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  content = _step.value;\n                  conversation = {\n                    who: 'bot',\n                    content: content\n                  };\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              console.log(conversation);\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              conversation = {\n                who: 'bot',\n                content: {\n                  text: {\n                    text: 'Yikes, woe is me!  Something went wrong.'\n                  }\n                }\n              };\n              console.log(conversation);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 12]]);\n    }));\n\n    return function textQuery(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var keyPressHandler = function keyPressHandler(e) {\n    if (e.key === \"Enter\") {\n      if (!e.target.value) {\n        return alert('Sorry, you need to type something first!');\n      }\n\n      textQuery(e.target.value);\n      e.target.value = \"\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 700,\n      width: 700,\n      border: '3px solid black',\n      borderRadius: '7px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 644,\n      width: '100%',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      margin: 0,\n      width: '100%',\n      height: 50,\n      borderRadius: '4px',\n      padding: '5px',\n      fontSize: '1rem'\n    },\n    placeholder: \"Send a message...\",\n    onKeyPress: keyPressHandler,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chatbot;","map":{"version":3,"sources":["/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js"],"names":["React","Axios","Chatbot","textQuery","text","conversation","who","content","console","log","textQueryVariables","post","response","data","fulfillmentMessages","keyPressHandler","e","key","target","value","alert","height","width","border","borderRadius","overflow","margin","padding","fontSize"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,GAAkB;AAEd,MAAMC,SAAS;AAAA,wEAAG,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACVC,cAAAA,YADU,GACK;AACfC,gBAAAA,GAAG,EAAE,MADU;AAEfC,gBAAAA,OAAO,EAAE;AACLH,kBAAAA,IAAI,EAAE;AACFA,oBAAAA,IAAI,EAAEA;AADJ;AADD;AAFM,eADL;AAUdI,cAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEMK,cAAAA,kBAZQ,GAYa;AAACN,gBAAAA,IAAI,EAAJA;AAAD,eAZb;AAAA;AAAA;AAAA,qBAeaH,KAAK,CAACU,IAAN,CAAW,2BAAX,EAAwCD,kBAAxC,CAfb;;AAAA;AAeJE,cAAAA,QAfI;AAAA,qDAgBUA,QAAQ,CAACC,IAAT,CAAcC,mBAhBxB;;AAAA;AAgBV,oEAAuD;AAA9CP,kBAAAA,OAA8C;AACnDF,kBAAAA,YAAY,GAAG;AACXC,oBAAAA,GAAG,EAAE,KADM;AAEXC,oBAAAA,OAAO,EAAEA;AAFE,mBAAf;AAIH;AArBS;AAAA;AAAA;AAAA;AAAA;;AAsBVC,cAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAtBU;AAAA;;AAAA;AAAA;AAAA;AAwBVA,cAAAA,YAAY,GAAG;AACXC,gBAAAA,GAAG,EAAE,KADM;AAEXC,gBAAAA,OAAO,EAAE;AACLH,kBAAAA,IAAI,EAAE;AACFA,oBAAAA,IAAI,EAAE;AADJ;AADD;AAFE,eAAf;AAQAI,cAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;;AAhCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATF,SAAS;AAAA;AAAA;AAAA,KAAf;;AAoCA,MAAMY,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD,EAAO;AAC3B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACnB,UAAI,CAACD,CAAC,CAACE,MAAF,CAASC,KAAd,EAAqB;AACjB,eAAOC,KAAK,CAAC,0CAAD,CAAZ;AACH;;AACDjB,MAAAA,SAAS,CAACa,CAAC,CAACE,MAAF,CAASC,KAAV,CAAT;AACAH,MAAAA,CAAC,CAACE,MAAF,CAASC,KAAT,GAAiB,EAAjB;AACH;AACJ,GARD;;AAUA,sBACI;AAAK,IAAA,KAAK,EAAE;AACRE,MAAAA,MAAM,EAAE,GADA;AACKC,MAAAA,KAAK,EAAE,GADZ;AAERC,MAAAA,MAAM,EAAE,iBAFA;AAEmBC,MAAAA,YAAY,EAAE;AAFjC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAK,IAAA,KAAK,EAAE;AAAEH,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE,MAAtB;AAA8BG,MAAAA,QAAQ,EAAE;AAAxC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eASI;AACI,IAAA,KAAK,EAAE;AACHC,MAAAA,MAAM,EAAE,CADL;AACQJ,MAAAA,KAAK,EAAE,MADf;AACuBD,MAAAA,MAAM,EAAE,EAD/B;AAEHG,MAAAA,YAAY,EAAE,KAFX;AAEkBG,MAAAA,OAAO,EAAE,KAF3B;AAEkCC,MAAAA,QAAQ,EAAE;AAF5C,KADX;AAKI,IAAA,WAAW,EAAC,mBALhB;AAMI,IAAA,UAAU,EAAEb,eANhB;AAOI,IAAA,IAAI,EAAC,MAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADJ;AAsBH;;AAED,eAAeb,OAAf","sourcesContent":["import React from 'react'\nimport Axios from 'axios'\n\nfunction Chatbot(){\n\n    const textQuery = async (text) => {\n        let conversation = {\n            who: 'user',\n            content: {\n                text: {\n                    text: text\n                }\n            }\n        }\n\n        console.log(conversation)\n\n        const textQueryVariables = {text}\n\n        try {\n            const response = await Axios.post('/api/dialogflow/textQuery', textQueryVariables)\n            for (let content of response.data.fulfillmentMessages) {\n                conversation = {\n                    who: 'bot',\n                    content: content\n                }\n            }\n            console.log(conversation)\n        } catch (error) {\n            conversation = {\n                who: 'bot',\n                content: {\n                    text: {\n                        text: 'Yikes, woe is me!  Something went wrong.'\n                    }\n                }\n            }\n            console.log(conversation)\n        }\n    }\n\n    const keyPressHandler = (e) => {\n        if (e.key === \"Enter\") {\n            if (!e.target.value) {\n                return alert('Sorry, you need to type something first!')\n            }\n            textQuery(e.target.value)\n            e.target.value = \"\"\n        }\n    }\n\n    return (\n        <div style={{\n            height: 700, width: 700,\n            border: '3px solid black', borderRadius: '7px'\n        }}>\n            <div style={{ height: 644, width: '100%', overflow: 'auto' }}>\n\n\n\n            </div>\n            <input\n                style={{\n                    margin: 0, width: '100%', height: 50,\n                    borderRadius: '4px', padding: '5px', fontSize: '1rem'\n                }}\n                placeholder=\"Send a message...\"\n                onKeyPress={keyPressHandler}\n                type=\"text\"\n            />\n\n        </div>\n    )\n}\n\nexport default Chatbot\n\n"]},"metadata":{},"sourceType":"module"}