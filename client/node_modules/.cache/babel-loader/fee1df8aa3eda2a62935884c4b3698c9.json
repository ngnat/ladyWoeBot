{"ast":null,"code":"import _regeneratorRuntime from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useEffect } from 'react';\nimport Axios from 'axios';\nimport { saveMessage } from '../store/messages';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from './Message';\n\nfunction Chatbot() {\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var messagesFromRedux = useSelector(function (state) {\n    return state.messages.messages;\n  });\n  useEffect(function () {\n    eventQuery('welcomeToLadyWoe');\n  }, []);\n\n  var textQuery = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var conversation, textQueryVariables, response, _iterator, _step, content;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              conversation = {\n                who: 'user',\n                content: {\n                  text: {\n                    text: text\n                  }\n                }\n              };\n              dispatch(saveMessage(conversation));\n              console.log(conversation);\n              textQueryVariables = {\n                text: text\n              };\n              _context.prev = 4;\n              _context.next = 7;\n              return Axios.post('/api/dialogflow/textQuery', textQueryVariables);\n\n            case 7:\n              response = _context.sent;\n              _iterator = _createForOfIteratorHelper(response.data.fulfillmentMessages);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  content = _step.value;\n                  conversation = {\n                    who: 'bot',\n                    content: content\n                  };\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              dispatch(saveMessage(conversation));\n              _context.next = 17;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](4);\n              conversation = {\n                who: 'bot',\n                content: {\n                  text: {\n                    text: 'Yikes, woe is me!  Something went wrong.'\n                  }\n                }\n              };\n              dispatch(saveMessage(conversation));\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 13]]);\n    }));\n\n    return function textQuery(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var eventQuery = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var eventQueryVariables, response, _iterator2, _step2, content, conversation, _conversation;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              eventQueryVariables = {\n                event: event\n              };\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Axios.post('/api/dialogflow/eventQuery', eventQueryVariables);\n\n            case 4:\n              response = _context2.sent;\n              _iterator2 = _createForOfIteratorHelper(response.data.fulfillmentMessages);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  content = _step2.value;\n                  conversation = {\n                    who: 'bot',\n                    content: content\n                  };\n                  dispatch(saveMessage(conversation));\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              _conversation = {\n                who: 'bot',\n                content: {\n                  text: {\n                    text: 'Yikes, woe is me!  Something went wrong.'\n                  }\n                }\n              };\n              dispatch(saveMessage(_conversation));\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function eventQuery(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (event.key === \"Enter\") {\n      if (!event.target.value) {\n        return alert('Sorry, you need to type something first!');\n      }\n\n      textQuery(event.target.value);\n      event.target.value = \"\";\n    }\n  };\n\n  var renderOneMessage = function renderOneMessage(message, i) {\n    console.log(message);\n    return /*#__PURE__*/React.createElement(Message, {\n      who: message.who,\n      text: message.content.text.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 16\n      }\n    });\n  };\n\n  var renderMessage = function renderMessage(returnedMessages) {\n    if (returnedMessages) {\n      return returnedMessages.map(function (message, i) {\n        return renderOneMessage(message, i);\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 700,\n      width: 700,\n      border: '3px solid black',\n      borderRadius: '7px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 644,\n      width: '100%',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, renderMessage(messagesFromRedux)), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      margin: 0,\n      width: '100%',\n      height: 50,\n      borderRadius: '4px',\n      padding: '5px',\n      fontSize: '1rem'\n    },\n    placeholder: \"Send a message...\",\n    onKeyPress: keyPressHandler,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chatbot;","map":{"version":3,"sources":["/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js"],"names":["React","useEffect","Axios","saveMessage","useDispatch","useSelector","Message","Chatbot","dispatch","messagesFromRedux","state","messages","eventQuery","textQuery","text","conversation","who","content","console","log","textQueryVariables","post","response","data","fulfillmentMessages","event","eventQueryVariables","keyPressHandler","key","target","value","alert","renderOneMessage","message","i","renderMessage","returnedMessages","map","height","width","border","borderRadius","overflow","margin","padding","fontSize"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport Axios from 'axios'\nimport {saveMessage} from '../store/messages'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from './Message'\n\nfunction Chatbot(){\n\n    const dispatch = useDispatch()\n    const messagesFromRedux = useSelector(state=> state.messages.messages)\n\n    useEffect(() => {\n        eventQuery('welcomeToLadyWoe')\n    }, [])\n\n    const textQuery = async (text) => {\n        let conversation = {\n            who: 'user',\n            content: {\n                text: {\n                    text: text\n                }\n            }\n        }\n        dispatch(saveMessage(conversation))\n        console.log(conversation)\n\n        const textQueryVariables = {text}\n\n        try {\n            const response = await Axios.post('/api/dialogflow/textQuery', textQueryVariables)\n            for (let content of response.data.fulfillmentMessages) {\n                conversation = {\n                    who: 'bot',\n                    content: content\n                }\n            }\n        dispatch(saveMessage(conversation))\n        } catch (error) {\n            conversation = {\n                who: 'bot',\n                content: {\n                    text: {\n                        text: 'Yikes, woe is me!  Something went wrong.'\n                    }\n                }\n            }\n            dispatch(saveMessage(conversation))\n        }\n    }\n\n\n    const eventQuery = async (event) => {\n\n\n        const eventQueryVariables = {event}\n\n        try {\n            const response = await Axios.post('/api/dialogflow/eventQuery', eventQueryVariables)\n            for (let content of response.data.fulfillmentMessages) {\n                let conversation = {\n                    who: 'bot',\n                    content: content\n                }\n            dispatch(saveMessage(conversation))\n            }\n        } catch (error) {\n            let conversation = {\n                who: 'bot',\n                content: {\n                    text: {\n                        text: 'Yikes, woe is me!  Something went wrong.'\n                    }\n                }\n            }\n            dispatch(saveMessage(conversation))\n        }\n    }\n\n    const keyPressHandler = (event) => {\n        if (event.key === \"Enter\") {\n            if (!event.target.value) {\n                return alert('Sorry, you need to type something first!')\n            }\n            textQuery(event.target.value)\n            event.target.value = \"\"\n        }\n    }\n\n    const renderOneMessage = (message, i) => {\n        console.log(message)\n\n        \n\n\n        return <Message who={message.who}  text={message.content.text.text} />\n    }\n\n    const renderMessage = (returnedMessages) => {\n        if(returnedMessages) {\n            return returnedMessages.map((message,i) => {\n                return renderOneMessage(message,i)\n            })\n        } else {\n            return null\n        }\n    }\n\n\n\n    return (\n        <div style={{\n            height: 700, width: 700,\n            border: '3px solid black', borderRadius: '7px'\n        }}>\n            <div style={{ height: 644, width: '100%', overflow: 'auto' }}>\n                {renderMessage(messagesFromRedux)}\n            </div>\n            <input\n                style={{\n                    margin: 0, width: '100%', height: 50,\n                    borderRadius: '4px', padding: '5px', fontSize: '1rem'\n                }}\n                placeholder=\"Send a message...\"\n                onKeyPress={keyPressHandler}\n                type=\"text\"\n            />\n\n        </div>\n    )\n}\n\nexport default Chatbot\n\n"]},"metadata":{},"sourceType":"module"}