{"ast":null,"code":"import _regeneratorRuntime from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useEffect } from 'react';\nimport Axios from 'axios';\nimport { saveMessage } from '../store/messages';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { List, Avatar, Col, Row } from 'antd';\nimport Message from './Message';\nimport CardMessage from './CardMessage';\n\nfunction Chatbot() {\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var messagesFromRedux = useSelector(function (state) {\n    return state.messages.messages;\n  });\n  useEffect(function () {\n    eventQuery('welcomeToLadyWoe');\n  }, []);\n\n  var textQuery = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var conversation, textQueryVariables, response, _iterator, _step, content;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              conversation = {\n                who: 'user',\n                content: {\n                  text: {\n                    text: text\n                  }\n                }\n              };\n              dispatch(saveMessage(conversation));\n              textQueryVariables = {\n                text: text\n              };\n              _context.prev = 3;\n              _context.next = 6;\n              return Axios.post('/api/dialogflow/textQuery', textQueryVariables);\n\n            case 6:\n              response = _context.sent;\n              _iterator = _createForOfIteratorHelper(response.data.fulfillmentMessages);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  content = _step.value;\n                  conversation = {\n                    who: 'bot',\n                    content: content\n                  };\n                  dispatch(saveMessage(conversation));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              conversation = {\n                who: 'bot',\n                content: {\n                  text: {\n                    text: 'Yikes, woe is me!  Something went wrong.'\n                  }\n                }\n              };\n              dispatch(saveMessage(conversation));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function textQuery(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var eventQuery = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var eventQueryVariables, response, _iterator2, _step2, content, conversation, _conversation;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              eventQueryVariables = {\n                event: event\n              };\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Axios.post('/api/dialogflow/eventQuery', eventQueryVariables);\n\n            case 4:\n              response = _context2.sent;\n              _iterator2 = _createForOfIteratorHelper(response.data.fulfillmentMessages);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  content = _step2.value;\n                  conversation = {\n                    who: 'bot',\n                    content: content\n                  };\n                  setTimeout(dispatch(saveMessage(conversation)), 1000);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              _conversation = {\n                who: 'bot',\n                content: {\n                  text: {\n                    text: 'Yikes, woe is me!  Something went wrong.'\n                  }\n                }\n              };\n              dispatch(saveMessage(_conversation));\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function eventQuery(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (event.key === \"Enter\") {\n      if (!event.target.value) {\n        return alert('Sorry, you need to type something first!');\n      }\n\n      textQuery(event.target.value);\n      event.target.value = \"\";\n    }\n  };\n\n  var renderCards = function renderCards(cards) {\n    return cards.map(function (card, i) {\n      return /*#__PURE__*/React.createElement(CardMessage, {\n        key: i,\n        cardInfo: card.structValue,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 39\n        }\n      });\n    });\n  }; // const renderQuickReplies\n\n\n  var renderOneMessage = function renderOneMessage(message, i) {\n    console.log(message);\n\n    if (message.content && message.content.text && message.content.text.text) {\n      return /*#__PURE__*/React.createElement(Message, {\n        who: message.who,\n        text: message.content.text.text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 20\n        }\n      });\n    } else if (message.content && message.content.payload.fields.card) {\n      var AvatarSrc = message.who === 'bot' ? /*#__PURE__*/React.createElement(Avatar, {\n        src: \"https://andc-scale.livewallcampaigns.com/imageScaled/?site=andc&file=1591975072_oprah-header.jpg&w=1200&h=675&cropped=1\",\n        shape: \"square\",\n        size: \"large\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 54\n        }\n      }) : /*#__PURE__*/React.createElement(Avatar, {\n        src: \"https://cdn-images-1.medium.com/fit/c/64/64/1*2aqceCF8AhCVXauMlUssaQ@2x.jpeg\",\n        size: \"large\",\n        shape: \"square\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 222\n        }\n      });\n      var titleName = message.who === 'bot' ? \"Lady Woe\" : \"Me\";\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(List.Item, {\n        style: {\n          padding: '1rem'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n        avatar: /*#__PURE__*/React.createElement(Avatar, {\n          icon: AvatarSrc,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }\n        }),\n        title: titleName,\n        description: renderCards(message.content.payload.fields.card.listValue.values),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      })));\n    }\n  };\n\n  var renderMessage = function renderMessage(returnedMessages) {\n    if (returnedMessages) {\n      return returnedMessages.map(function (message, i) {\n        return renderOneMessage(message, i);\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 700,\n      width: 700,\n      border: '3px solid black',\n      borderRadius: '7px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 644,\n      width: '100%',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, renderMessage(messagesFromRedux)), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      margin: 0,\n      width: '100%',\n      height: 50,\n      borderRadius: '4px',\n      padding: '5px',\n      fontSize: '1rem'\n    },\n    placeholder: \"Send a message...\",\n    onKeyPress: keyPressHandler,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chatbot;","map":{"version":3,"sources":["/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js"],"names":["React","useEffect","Axios","saveMessage","useDispatch","useSelector","List","Avatar","Col","Row","Message","CardMessage","Chatbot","dispatch","messagesFromRedux","state","messages","eventQuery","textQuery","text","conversation","who","content","textQueryVariables","post","response","data","fulfillmentMessages","event","eventQueryVariables","setTimeout","keyPressHandler","key","target","value","alert","renderCards","cards","map","card","i","structValue","renderOneMessage","message","console","log","payload","fields","AvatarSrc","titleName","padding","listValue","values","renderMessage","returnedMessages","height","width","border","borderRadius","overflow","margin","fontSize"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport Axios from 'axios'\nimport {saveMessage} from '../store/messages'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { List, Avatar, Col, Row } from 'antd';\nimport Message from './Message'\nimport CardMessage from './CardMessage'\n\nfunction Chatbot(){\n\n    const dispatch = useDispatch()\n    const messagesFromRedux = useSelector(state=> state.messages.messages)\n\n    useEffect(() => {\n        eventQuery('welcomeToLadyWoe')\n    }, [])\n\n    const textQuery = async (text) => {\n        let conversation = {\n            who: 'user',\n            content: {\n                text: {\n                    text: text\n                }\n            }\n        }\n        dispatch(saveMessage(conversation))\n\n        const textQueryVariables = {text}\n\n        try {\n            const response = await Axios.post('/api/dialogflow/textQuery', textQueryVariables)\n            for (let content of response.data.fulfillmentMessages) {\n                conversation = {\n                    who: 'bot',\n                    content: content\n                }\n                dispatch(saveMessage(conversation))\n            }\n        } catch (error) {\n            conversation = {\n                who: 'bot',\n                content: {\n                    text: {\n                        text: 'Yikes, woe is me!  Something went wrong.'\n                    }\n                }\n            }\n            dispatch(saveMessage(conversation))\n        }\n    }\n\n\n    const eventQuery = async (event) => {\n\n\n        const eventQueryVariables = {event}\n\n        try {\n            const response = await Axios.post('/api/dialogflow/eventQuery', eventQueryVariables)\n            for (let content of response.data.fulfillmentMessages) {\n                let conversation = {\n                    who: 'bot',\n                    content: content\n                }\n\n           setTimeout(dispatch(saveMessage(conversation)), 1000)\n            }\n        } catch (error) {\n            let conversation = {\n                who: 'bot',\n                content: {\n                    text: {\n                        text: 'Yikes, woe is me!  Something went wrong.'\n                    }\n                }\n            }\n            dispatch(saveMessage(conversation))\n        }\n    }\n\n    const keyPressHandler = (event) => {\n        if (event.key === \"Enter\") {\n            if (!event.target.value) {\n                return alert('Sorry, you need to type something first!')\n            }\n            textQuery(event.target.value)\n            event.target.value = \"\"\n        }\n    }\n\n    const renderCards = (cards) => {\n        return cards.map((card, i) => <CardMessage key={i} cardInfo={card.structValue} />)\n    }\n\n    // const renderQuickReplies\n\n    const renderOneMessage = (message, i) => {\n        console.log(message)\n        if(message.content && message.content.text && message.content.text.text) {\n            return <Message who={message.who}  text={message.content.text.text} />\n        } else if (message.content && message.content.payload.fields.card) {\n\n            const AvatarSrc = message.who ==='bot' ? <Avatar src=\"https://andc-scale.livewallcampaigns.com/imageScaled/?site=andc&file=1591975072_oprah-header.jpg&w=1200&h=675&cropped=1\"  shape=\"square\" size=\"large\" /> : <Avatar src=\"https://cdn-images-1.medium.com/fit/c/64/64/1*2aqceCF8AhCVXauMlUssaQ@2x.jpeg\" size=\"large\" shape=\"square\" />  \n            const titleName = message.who ==='bot' ? \"Lady Woe\" :  \"Me\"\n\n            return <div>\n                <List.Item style={{ padding: '1rem' }}>\n                    <List.Item.Meta\n                        avatar={<Avatar icon={AvatarSrc} />}\n                        title={titleName}\n                        description={renderCards(message.content.payload.fields.card.listValue.values)}\n                    />\n                </List.Item>\n            </div>\n        }\n\n\n    }\n\n    const renderMessage = (returnedMessages) => {\n        if(returnedMessages) {\n            return returnedMessages.map((message,i) => {\n                return renderOneMessage(message,i)\n            })\n        } else {\n            return null\n        }\n    }\n\n\n\n    return (\n        <div style={{\n            height: 700, width: 700,\n            border: '3px solid black', borderRadius: '7px'\n        }}>\n            <div style={{ height: 644, width: '100%', overflow: 'auto' }}>\n                {renderMessage(messagesFromRedux)}\n            </div>\n            <input\n                style={{\n                    margin: 0, width: '100%', height: 50,\n                    borderRadius: '4px', padding: '5px', fontSize: '1rem'\n                }}\n                placeholder=\"Send a message...\"\n                onKeyPress={keyPressHandler}\n                type=\"text\"\n            />\n\n        </div>\n    )\n}\n\nexport default Chatbot\n\n"]},"metadata":{},"sourceType":"module"}