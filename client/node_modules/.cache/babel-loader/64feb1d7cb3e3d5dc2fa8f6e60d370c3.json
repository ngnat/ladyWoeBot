{"ast":null,"code":"import _regeneratorRuntime from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/natalieng/Desktop/ownBot/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nfunction Chatbot() {\n  var textQuery = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var conversation, textQueryInput, response, content;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              conversation = {\n                who: 'user',\n                content: {\n                  text: {\n                    text: text\n                  }\n                }\n              };\n              console.log(conversation);\n              textQueryInput = {\n                text: text\n              };\n              _context.prev = 3;\n              _context.next = 6;\n              return axios.post('/api/dialogflow/textQuery', textQueryInput);\n\n            case 6:\n              response = _context.sent;\n              content = response.data.fullfillmentMessages[0];\n              conversation = {\n                who: 'bot',\n                content: content\n              };\n              console.log(conversation);\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              conversation = {\n                who: 'bot',\n                content: {\n                  text: {\n                    text: 'Yikes, woe is me!  Something went wrong.'\n                  }\n                }\n              };\n              console.log(conversation);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 12]]);\n    }));\n\n    return function textQuery(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (event.key === \"Enter\") {\n      if (event.target.value) {\n        return alert('Sorry, you need to type something first!');\n      }\n\n      textQuery(event.target.value);\n      event.target.value = \"\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 700,\n      width: 700,\n      border: '3px solid black',\n      borderRadius: '7px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 644,\n      width: '100%',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      margin: 0,\n      width: '100%',\n      height: 50,\n      borderRadius: '4px',\n      padding: '5px',\n      fontSize: '1rem'\n    },\n    placeholder: \"Send a message...\",\n    onKeyPress: keyPressHandler,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chatbot;","map":{"version":3,"sources":["/Users/natalieng/Desktop/ownBot/client/src/Chatbot/Chatbot.js"],"names":["React","axios","Chatbot","textQuery","text","conversation","who","content","console","log","textQueryInput","post","response","data","fullfillmentMessages","keyPressHandler","event","key","target","value","alert","height","width","border","borderRadius","overflow","margin","padding","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,GAAkB;AAEd,MAAMC,SAAS;AAAA,wEAAE,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,cAAAA,YADS,GACM;AACfC,gBAAAA,GAAG,EAAE,MADU;AAEfC,gBAAAA,OAAO,EAAE;AACLH,kBAAAA,IAAI,EAAE;AACFA,oBAAAA,IAAI,EAAEA;AADJ;AADD;AAFM,eADN;AAUbI,cAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEMK,cAAAA,cAZO,GAYU;AAACN,gBAAAA,IAAI,EAAJA;AAAD,eAZV;AAAA;AAAA;AAAA,qBAecH,KAAK,CAACU,IAAN,CAAW,2BAAX,EAAwCD,cAAxC,CAfd;;AAAA;AAeHE,cAAAA,QAfG;AAgBHL,cAAAA,OAhBG,GAgBOK,QAAQ,CAACC,IAAT,CAAcC,oBAAd,CAAmC,CAAnC,CAhBP;AAiBTT,cAAAA,YAAY,GAAG;AACXC,gBAAAA,GAAG,EAAE,KADM;AAEXC,gBAAAA,OAAO,EAAEA;AAFE,eAAf;AAIAC,cAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AArBS;AAAA;;AAAA;AAAA;AAAA;AAuBTA,cAAAA,YAAY,GAAG;AACXC,gBAAAA,GAAG,EAAE,KADM;AAEXC,gBAAAA,OAAO,EAAE;AACLH,kBAAAA,IAAI,EAAE;AACFA,oBAAAA,IAAI,EAAE;AADJ;AADD;AAFE,eAAf;AAQAI,cAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;;AA/BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,oBAATF,SAAS;AAAA;AAAA;AAAA,KAAf;;AAmCA,MAAMY,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACvB,UAAID,KAAK,CAACE,MAAN,CAAaC,KAAjB,EAAwB;AACpB,eAAOC,KAAK,CAAC,0CAAD,CAAZ;AACH;;AACDjB,MAAAA,SAAS,CAACa,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAT;AACAH,MAAAA,KAAK,CAACE,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACH;AACJ,GARD;;AAUA,sBACI;AAAK,IAAA,KAAK,EAAE;AACRE,MAAAA,MAAM,EAAE,GADA;AACKC,MAAAA,KAAK,EAAE,GADZ;AAERC,MAAAA,MAAM,EAAE,iBAFA;AAEmBC,MAAAA,YAAY,EAAE;AAFjC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAK,IAAA,KAAK,EAAE;AAAEH,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE,MAAtB;AAA8BG,MAAAA,QAAQ,EAAE;AAAxC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eASI;AACI,IAAA,KAAK,EAAE;AACHC,MAAAA,MAAM,EAAE,CADL;AACQJ,MAAAA,KAAK,EAAE,MADf;AACuBD,MAAAA,MAAM,EAAE,EAD/B;AAEHG,MAAAA,YAAY,EAAE,KAFX;AAEkBG,MAAAA,OAAO,EAAE,KAF3B;AAEkCC,MAAAA,QAAQ,EAAE;AAF5C,KADX;AAKI,IAAA,WAAW,EAAC,mBALhB;AAMI,IAAA,UAAU,EAAEb,eANhB;AAOI,IAAA,IAAI,EAAC,MAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADJ;AAsBH;;AAED,eAAeb,OAAf","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\nfunction Chatbot(){\n\n    const textQuery= async(text) => {\n        let conversation = {\n            who: 'user',\n            content: {\n                text: {\n                    text: text\n                }\n            }\n        }\n\n        console.log(conversation)\n\n        const textQueryInput = {text}\n\n        try {\n            const response = await axios.post('/api/dialogflow/textQuery', textQueryInput)\n            const content = response.data.fullfillmentMessages[0]\n            conversation = {\n                who: 'bot',\n                content: content\n            }\n            console.log(conversation)\n        } catch (error) {\n            conversation = {\n                who: 'bot',\n                content: {\n                    text: {\n                        text: 'Yikes, woe is me!  Something went wrong.'\n                    }\n                }\n            }\n            console.log(conversation)\n        }\n    }\n\n    const keyPressHandler = (event) => {\n        if (event.key === \"Enter\") {\n            if (event.target.value) {\n                return alert('Sorry, you need to type something first!')\n            }\n            textQuery(event.target.value)\n            event.target.value = \"\"\n        }\n    }\n\n    return (\n        <div style={{\n            height: 700, width: 700,\n            border: '3px solid black', borderRadius: '7px'\n        }}>\n            <div style={{ height: 644, width: '100%', overflow: 'auto' }}>\n\n\n\n            </div>\n            <input\n                style={{\n                    margin: 0, width: '100%', height: 50,\n                    borderRadius: '4px', padding: '5px', fontSize: '1rem'\n                }}\n                placeholder=\"Send a message...\"\n                onKeyPress={keyPressHandler}\n                type=\"text\"\n            />\n\n        </div>\n    )\n}\n\nexport default Chatbot\n\n"]},"metadata":{},"sourceType":"module"}